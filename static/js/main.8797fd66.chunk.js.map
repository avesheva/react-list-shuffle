{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["shuffledHandler","arr","console","log","App","_useState","useState","_useState2","Object","slicedToArray","anyListItemsArray","setAnyListItemsArray","_useState3","_useState4","shuffleKey","setShuffleKey","_useState5","_useState6","restoreKey","setRestoreKey","react_default","a","createElement","className","onClick","l","concat","toConsumableArray","length","Date","now","react_list_shuffle_es","shuffle","duration","restoreOrder","map","item","key","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"mNAIMA,EAAkB,SAACC,GACvBC,QAAQC,IAAI,uBAAwBF,IAgCvBG,MA7Bf,WAAe,IAAAC,EACqCC,mBAAS,CAAC,EAAG,EAAG,EAAG,EAAG,IAAGC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAApEK,EAAiBH,EAAA,GAAEI,EAAoBJ,EAAA,GAAAK,EACVN,mBAAS,GAAEO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAAxCE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAAAG,EACIV,mBAAS,GAAEW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAAxCE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAEhC,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,UAAQE,QAAS,WAAQb,EAAqB,SAACc,GAAC,SAAAC,OAAAlB,OAAAmB,EAAA,EAAAnB,CAASiB,GAAC,CAAEA,EAAEG,aAAY,YAC1ER,EAAAC,EAAAC,cAAA,UAAQE,QAAS,WAAQT,EAAcc,KAAKC,SAAU,WACtDV,EAAAC,EAAAC,cAAA,UAAQE,QAAS,WAAQL,EAAcU,KAAKC,SAAU,kBAGxDV,EAAAC,EAAAC,cAACS,EAAA,EAAW,CACVC,QAAUlB,EACVmB,SAAW,EACXC,aAAehB,EACflB,gBAAiBA,GAEfU,EAAkByB,IAAI,SAACC,GAAY,OAAKhB,EAAAC,EAAAC,cAAA,OAAKe,IAAMD,EAAOb,UAAqB,IAATa,EAAa,MAAQ,aAAc,QAClGA,SCfJE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,MCHDY,IAASC,WACpBC,SAASC,eAAe,SAErBC,OACHnC,EAAAC,EAAAC,cAACF,EAAAC,EAAMmC,WAAU,KACfpC,EAAAC,EAAAC,cAACmC,EAAG,QAORnB","file":"static/js/main.8797fd66.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport './App.css'\nimport ListShuffle from 'react-list-shuffle'\n\nconst shuffledHandler = (arr: number[]) => {\n  console.log('Shuffled handler :: ', arr)\n}\n\nfunction App() {\n  const [anyListItemsArray, setAnyListItemsArray] = useState([0, 1, 2, 3, 4])\n  const [shuffleKey, setShuffleKey] = useState(1)\n  const [restoreKey, setRestoreKey] = useState(1)\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"buttons\">\n          <button onClick={() => { setAnyListItemsArray((l) => [...l, l.length]) }}>Add Item</button>\n          <button onClick={() => { setShuffleKey(Date.now()) }}>Shuffle</button>\n          <button onClick={() => { setRestoreKey(Date.now()) }}>Restore order</button>\n        </div>\n\n        <ListShuffle\n          shuffle={ shuffleKey }\n          duration={ 2 }\n          restoreOrder={ restoreKey }\n          shuffledHandler={shuffledHandler}\n        >\n          { anyListItemsArray.map((item: number) => <div key={ item } className={ item === 3 ? 'big' : 'list-item' }>\n            ITEM { item }\n          </div>)}\n        </ListShuffle>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}